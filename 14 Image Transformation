{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ea8b4555-e738-4b7e-a7c5-c9052f2aafd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2 \n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2fa56071-4365-4ce7-ab3a-c0c6b2a00808",
   "metadata": {},
   "outputs": [],
   "source": [
    "img = cv2.imread('images/lenna.png')\n",
    "\n",
    "# Define transformation parameters\n",
    "tx = 50 # Translation along x-axis\n",
    "ty = 100 # Translation along y-axis\n",
    "angle = 45 # Rotation angle in degrees\n",
    "scale = 1.2 # Scaling factor\n",
    "shear_x = 0.3 # Shearing along x-axis\n",
    "shear_y = 0.2 # Shearing along y-axis\n",
    "\n",
    "# Create transformation matrix\n",
    "M = np.float32([[scale*np.cos(np.radians(angle)), shear_x, tx], [shear_y, scale*np.sin(np.radians(angle)), ty]])\n",
    "\n",
    "# Apply transformation using warpAffine\n",
    "img_affine = cv2.warpAffine(img, M, (512, 512))\n",
    "\n",
    "# Display original and affine transformed images\n",
    "cv2.imshow('Affine Transformed Image', img_affine)\n",
    "cv2.waitKey(0)\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f890b48b-18c1-45ca-ada9-5f55a049bbd6",
   "metadata": {},
   "outputs": [],
   "source": [
    "img = cv2.imread('images/lenna.png')\n",
    "\n",
    "# Define transformation parameters\n",
    "tx = 50 # Translation along x-axis\n",
    "ty = 100 # Translation along y-axis\n",
    "angle = 45 # Rotation angle in degrees\n",
    "scale = 0.8 # Scaling factor\n",
    "shear_x = 0.3 # Shearing along x-axis\n",
    "shear_y = 0.2 # Shearing along y-axis\n",
    "\n",
    "# Create transformation matrix\n",
    "M = np.float32([[scale*np.cos(np.radians(angle)), shear_x, tx], [shear_y, scale*np.sin(np.radians(angle)), ty]])\n",
    "\n",
    "# Apply transformation using warpAffine\n",
    "img_affine = cv2.warpAffine(img, M, (512, 512))\n",
    "\n",
    "# Display original and affine transformed images\n",
    "trans_img = np.hstack([img, img_affine])\n",
    "cv2.imshow('Affine Transformed Image', trans_img)\n",
    "cv2.waitKey(0)\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "921f8213-d1a3-47fb-bb4b-810634558682",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
